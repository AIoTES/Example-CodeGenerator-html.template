##oci_${ #className ($axiom.getEntity())}
		#foreach ( $clsAxiom in $ontology.getAxioms($class))##
			##Check for class annotations
			##oci.setResourceComment("A comment describing what this concept is used for");
			##oci.setResourceLabel("Human readable ID for the concept. e.g: 'My Concept'");

			##Check for Named SubClassof
			##oci.addSuperClass(ManagedIndividual.MY_URI);

			##Check for ClassExpression SubClassof (ie properties)
					## ObjectProperties
		// This restriction means that in this property there must be a Device
		// concept, with cardinality 1:1 (a mandatory single Device).
		// SetFunctional means it can only have one value (max cardinality is 1)
		oci.addObjectProperty(MyConcept.PROP_X_CONCEPT_ONLY_ONE).setFunctional();
		oci.addRestriction(MergedRestriction.getAllValuesRestrictionWithCardinality(MyConcept.PROP_X_CONCEPT_ONLY_ONE,
				Device.MY_URI, 1, 1));

		// This restriction means that in this property there can be none,
		// one or many Sensor concepts
		oci.addObjectProperty(MyConcept.PROP_Y_CONCEPT_LIST);
		oci.addRestriction(MergedRestriction.getAllValuesRestriction(MyConcept.PROP_Y_CONCEPT_LIST, Sensor.MY_URI));

		## DataProperties
		// If the concept in the property has to be a literal (boolean,string,
		// int...) make use of adDatatype and then TypeMapper to get its URI. In
		// this case the cardinality is "optional" (0 or 1)
		oci.addDatatypeProperty(MyConcept.PROP_Z_LITERAL_OPTIONAL).setFunctional();
		oci.addRestriction(MergedRestriction.getAllValuesRestrictionWithCardinality(MyConcept.PROP_Z_LITERAL_OPTIONAL,
				TypeMapper.getDatatypeURI(Long.class), 0, 1));
			##Check for EquivalentClass

			##Check for DisjointClass
		#end